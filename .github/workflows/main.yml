name: build

on:
  push:
    branches:
      - main

jobs:
  deploy_infrastructure:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infrastructure
    permissions:
      id-token: write
      contents: read
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: configure aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
      - name: setup nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn
          cache-dependency-path: infrastructure/yarn.lock
      - name: install dependencies
        run: yarn install --frozen-lockfile
      - name: setup golang
        uses: actions/setup-go@v3
        with:
          go-version: '1.18'
          cache: true
          cache-dependency-path: infrastructure/go.sum
      - name: go mod download
        run: go mod download -x
      - name: setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.3
          terraform_wrapper: false
      - name: apply
        run: yarn apply:auto-approve

  deploy_frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    permissions:
      id-token: write
      contents: read
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: configure aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
      - name: setup golang
        uses: actions/setup-go@v3
        with:
          go-version: '1.18'
      - name: install go-task
        uses: arduino/setup-task@v1
      - name: deploy
        run: task deploy

  deploy_backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    permissions:
      id-token: write
      contents: read
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: configure aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
      - name: login to ecr
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: build and push docker image to ecr
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: gogogo-api
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: update function
        run: aws lambda update-function-code --function-name gogogo-api --image-uri $REGISTRY/$REPOSITORY:$IMAGE_TAG
